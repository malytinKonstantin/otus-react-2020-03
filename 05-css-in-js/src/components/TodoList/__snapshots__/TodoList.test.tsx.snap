// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TodoListContainer /> renders snapshot 1`] = `
Array [
  .emotion-6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-bottom: 15px;
}

.emotion-6 * {
  margin-right: 15px;
}

.emotion-0 {
  padding: 5px 10px;
  border-radius: 5px;
  box-shadow: none;
  border: 1px solid #afafaf;
}

<form
    action="#"
    onReset={[Function]}
    onSubmit={[Function]}
  >
    <div
      className="emotion-6 emotion-7"
    >
      <input
        className="emotion-0 emotion-1"
        form={
          Object {
            "dirty": false,
            "errors": Object {},
            "getFieldHelpers": [Function],
            "getFieldMeta": [Function],
            "getFieldProps": [Function],
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleReset": [Function],
            "handleSubmit": [Function],
            "initialErrors": Object {},
            "initialStatus": undefined,
            "initialTouched": Object {},
            "initialValues": Object {
              "title": "",
            },
            "isSubmitting": false,
            "isValid": true,
            "isValidating": false,
            "registerField": [Function],
            "resetForm": [Function],
            "setErrors": [Function],
            "setFieldError": [Function],
            "setFieldTouched": [Function],
            "setFieldValue": [Function],
            "setFormikState": [Function],
            "setStatus": [Function],
            "setSubmitting": [Function],
            "setTouched": [Function],
            "setValues": [Function],
            "status": undefined,
            "submitCount": 0,
            "submitForm": [Function],
            "touched": Object {},
            "unregisterField": [Function],
            "validateField": [Function],
            "validateForm": [Function],
            "validateOnBlur": true,
            "validateOnChange": true,
            "validateOnMount": false,
            "values": Object {
              "title": "",
            },
          }
        }
        id="title"
        onChange={[Function]}
        type="text"
        value=""
      />
      <button
        className="emotion-2 emotion-3"
        type="submit"
      >
        добавить
      </button>
      <button
        className="emotion-4 emotion-5"
        onClick={[Function]}
        type="button"
      >
        сброс
      </button>
    </div>
  </form>,
  .emotion-6 {
  margin-bottom: 10px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.emotion-2 {
  font-family: monospace;
  font-size: 16px;
  color: #000;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  cursor: pointer;
}

.emotion-0 {
  width: 16px;
  -webkit-flex-basis: 6px;
  -ms-flex-preferred-size: 6px;
  flex-basis: 6px;
  min-width: 16px;
  height: 16px;
  border: 1px solid blue;
  border-radius: 3px;
  margin-right: 10px;
  position: relative;
}

.emotion-0:before {
  content: '';
  position: absolute;
  top: 3px;
  left: 3px;
  width: 10px;
  height: 10px;
  border-radius: 2px;
  background-color: transparent;
}

.emotion-0:hover {
  cursor: pointer;
}

.emotion-4 {
  border: none;
  color: #fff;
  padding: 3px 10px;
  border-radius: 3px;
  background-color: #ec2c2c;
  margin-left: 10px;
}

.emotion-4:active {
  outline: none;
  box-shadow: none;
}

<div
    className="emotion-6 emotion-7"
  >
    <div
      className="emotion-2 emotion-3"
      onClick={[Function]}
    >
      <div
        className="emotion-0 emotion-1"
      />
      task 1
    </div>
    <button
      className="emotion-4 emotion-5"
      onClick={[Function]}
    >
      удалить
    </button>
  </div>,
]
`;
